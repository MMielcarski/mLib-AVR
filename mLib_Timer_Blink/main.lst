   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	delay_ms
  12               	delay_ms:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** // device: 	AtMega 328p
   2:main.c        **** // author:  Maciej Mielcarski
   3:main.c        **** 
   4:main.c        **** #include <avr/io.h>
   5:main.c        **** #include <util/delay.h>
   6:main.c        **** #include <avr/interrupt.h>
   7:main.c        **** 
   8:main.c        **** #define F_CPU 8000000UL
   9:main.c        **** 
  10:main.c        **** #define TIM1_PSC 1024		// TIMER 1 prescaler value
  11:main.c        **** #define TIM1_FREQ 1			// TIMER 1 desired frequency in seconds
  12:main.c        **** 
  13:main.c        **** #define LED_1_PIN 	PB5
  14:main.c        **** #define LED_1_PORT 	PORTB
  15:main.c        **** #define LED_1_DDR 	DDRB
  16:main.c        **** #define LED_1_PIN_r PINB
  17:main.c        **** 
  18:main.c        **** void delay_ms(int ms)		// delay error workaround
  19:main.c        **** {
  15               		.loc 1 19 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 00D0      		rcall .
  27 0006 00D0      		rcall .
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 8
  30 0008 CDB7      		in r28,__SP_L__
  31 000a DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 4 */
  36               	/* stack size = 6 */
  37               	.L__stack_usage = 6
  20:main.c        **** 	volatile long unsigned int i;
  21:main.c        **** 	for(i=0;i<ms;i++)
  38               		.loc 1 21 0
  39 000c 1982      		std Y+1,__zero_reg__
  40 000e 1A82      		std Y+2,__zero_reg__
  41 0010 1B82      		std Y+3,__zero_reg__
  42 0012 1C82      		std Y+4,__zero_reg__
  43 0014 092E      		mov __tmp_reg__,r25
  44 0016 000C      		lsl r0
  45 0018 AA0B      		sbc r26,r26
  46 001a BB0B      		sbc r27,r27
  47               	.L2:
  48               		.loc 1 21 0 is_stmt 0 discriminator 1
  49 001c 4981      		ldd r20,Y+1
  50 001e 5A81      		ldd r21,Y+2
  51 0020 6B81      		ldd r22,Y+3
  52 0022 7C81      		ldd r23,Y+4
  53 0024 4817      		cp r20,r24
  54 0026 5907      		cpc r21,r25
  55 0028 6A07      		cpc r22,r26
  56 002a 7B07      		cpc r23,r27
  57 002c 00F4      		brsh .L5
  58               	.LVL1:
  59               	.LBB4:
  60               	.LBB5:
  61               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  62               		.loc 2 187 0 is_stmt 1
  63 002e EFEC      		ldi r30,lo8(1999)
  64 0030 F7E0      		ldi r31,hi8(1999)
  65 0032 3197      	1:	sbiw r30,1
  66 0034 01F4      		brne 1b
  67 0036 00C0      		rjmp .
  68 0038 0000      		nop
  69               	.LVL2:
  70               	.LBE5:
  71               	.LBE4:
  72               		.loc 1 21 0
  73 003a 4981      		ldd r20,Y+1
  74 003c 5A81      		ldd r21,Y+2
  75 003e 6B81      		ldd r22,Y+3
  76 0040 7C81      		ldd r23,Y+4
  77 0042 4F5F      		subi r20,-1
  78 0044 5F4F      		sbci r21,-1
  79 0046 6F4F      		sbci r22,-1
  80 0048 7F4F      		sbci r23,-1
  81 004a 4983      		std Y+1,r20
  82 004c 5A83      		std Y+2,r21
  83 004e 6B83      		std Y+3,r22
  84 0050 7C83      		std Y+4,r23
  85 0052 00C0      		rjmp .L2
  86               	.L5:
  87               	/* epilogue start */
  22:main.c        **** 	_delay_ms(1);
  23:main.c        **** }
  88               		.loc 1 23 0
  89 0054 0F90      		pop __tmp_reg__
  90 0056 0F90      		pop __tmp_reg__
  91 0058 0F90      		pop __tmp_reg__
  92 005a 0F90      		pop __tmp_reg__
  93 005c DF91      		pop r29
  94 005e CF91      		pop r28
  95 0060 0895      		ret
  96               		.cfi_endproc
  97               	.LFE6:
  99               	.global	Toggle_LED
 101               	Toggle_LED:
 102               	.LFB7:
  24:main.c        **** 
  25:main.c        **** void Toggle_LED()
  26:main.c        **** {
 103               		.loc 1 26 0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  27:main.c        **** 	if(LED_1_PIN_r & (1<<LED_1_PIN))	LED_1_PORT &= ~(1<<LED_1_PIN);
 109               		.loc 1 27 0
 110 0062 1D9B      		sbis 0x3,5
 111 0064 00C0      		rjmp .L7
 112               	.LBB8:
 113 0066 2D98      		cbi 0x5,5
 114 0068 0895      		ret
 115               	.L7:
 116               	.LBE8:
  28:main.c        **** 	else								LED_1_PORT |= (1<<LED_1_PIN);
 117               		.loc 1 28 0
 118 006a 2D9A      		sbi 0x5,5
 119 006c 0895      		ret
 120               		.cfi_endproc
 121               	.LFE7:
 123               		.section	.text.startup,"ax",@progbits
 124               	.global	main
 126               	main:
 127               	.LFB8:
  29:main.c        **** }
  30:main.c        **** 
  31:main.c        **** int main(void)
  32:main.c        **** {
 128               		.loc 1 32 0
 129               		.cfi_startproc
 130               	/* prologue: function */
 131               	/* frame size = 0 */
 132               	/* stack size = 0 */
 133               	.L__stack_usage = 0
  33:main.c        **** 	LED_1_DDR |= (1<<LED_1_PIN);					// led pin set as output
 134               		.loc 1 33 0
 135 0000 259A      		sbi 0x4,5
  34:main.c        **** 
  35:main.c        ****     OCR1A = ((F_CPU / TIM1_PSC) * TIM1_FREQ) - 1;	// (dec 15624) counter size
 136               		.loc 1 35 0
 137 0002 83E8      		ldi r24,lo8(-125)
 138 0004 9EE1      		ldi r25,lo8(30)
 139 0006 9093 8900 		sts 136+1,r25
 140 000a 8093 8800 		sts 136,r24
  36:main.c        ****     TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
 141               		.loc 1 36 0
 142 000e 8091 8100 		lds r24,129
 143 0012 8860      		ori r24,lo8(8)
 144 0014 8093 8100 		sts 129,r24
  37:main.c        ****     TIMSK1 |= (1 << OCIE1A);						// Set interrupt on compare match	
 145               		.loc 1 37 0
 146 0018 8091 6F00 		lds r24,111
 147 001c 8260      		ori r24,lo8(2)
 148 001e 8093 6F00 		sts 111,r24
  38:main.c        ****     TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
 149               		.loc 1 38 0
 150 0022 8091 8100 		lds r24,129
 151 0026 8560      		ori r24,lo8(5)
 152 0028 8093 8100 		sts 129,r24
  39:main.c        ****     sei();											// enable interrupts
 153               		.loc 1 39 0
 154               	/* #APP */
 155               	 ;  39 "main.c" 1
 156 002c 7894      		sei
 157               	 ;  0 "" 2
 158               	/* #NOAPP */
 159               	.L10:
 160 002e 00C0      		rjmp .L10
 161               		.cfi_endproc
 162               	.LFE8:
 164               		.text
 165               	.global	__vector_11
 167               	__vector_11:
 168               	.LFB9:
  40:main.c        **** 
  41:main.c        **** 	while(1)
  42:main.c        **** 	{
  43:main.c        **** 		// Toggle_LED();
  44:main.c        **** 		// delay_ms(1000);
  45:main.c        **** 	}
  46:main.c        **** }
  47:main.c        **** 
  48:main.c        **** ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
  49:main.c        **** {
 169               		.loc 1 49 0
 170               		.cfi_startproc
 171 006e 1F92      		push r1
 172               	.LCFI4:
 173               		.cfi_def_cfa_offset 3
 174               		.cfi_offset 1, -2
 175 0070 0F92      		push r0
 176               	.LCFI5:
 177               		.cfi_def_cfa_offset 4
 178               		.cfi_offset 0, -3
 179 0072 0FB6      		in r0,__SREG__
 180 0074 0F92      		push r0
 181 0076 1124      		clr __zero_reg__
 182 0078 2F93      		push r18
 183               	.LCFI6:
 184               		.cfi_def_cfa_offset 5
 185               		.cfi_offset 18, -4
 186 007a 3F93      		push r19
 187               	.LCFI7:
 188               		.cfi_def_cfa_offset 6
 189               		.cfi_offset 19, -5
 190 007c 4F93      		push r20
 191               	.LCFI8:
 192               		.cfi_def_cfa_offset 7
 193               		.cfi_offset 20, -6
 194 007e 5F93      		push r21
 195               	.LCFI9:
 196               		.cfi_def_cfa_offset 8
 197               		.cfi_offset 21, -7
 198 0080 6F93      		push r22
 199               	.LCFI10:
 200               		.cfi_def_cfa_offset 9
 201               		.cfi_offset 22, -8
 202 0082 7F93      		push r23
 203               	.LCFI11:
 204               		.cfi_def_cfa_offset 10
 205               		.cfi_offset 23, -9
 206 0084 8F93      		push r24
 207               	.LCFI12:
 208               		.cfi_def_cfa_offset 11
 209               		.cfi_offset 24, -10
 210 0086 9F93      		push r25
 211               	.LCFI13:
 212               		.cfi_def_cfa_offset 12
 213               		.cfi_offset 25, -11
 214 0088 AF93      		push r26
 215               	.LCFI14:
 216               		.cfi_def_cfa_offset 13
 217               		.cfi_offset 26, -12
 218 008a BF93      		push r27
 219               	.LCFI15:
 220               		.cfi_def_cfa_offset 14
 221               		.cfi_offset 27, -13
 222 008c EF93      		push r30
 223               	.LCFI16:
 224               		.cfi_def_cfa_offset 15
 225               		.cfi_offset 30, -14
 226 008e FF93      		push r31
 227               	.LCFI17:
 228               		.cfi_def_cfa_offset 16
 229               		.cfi_offset 31, -15
 230               	/* prologue: Signal */
 231               	/* frame size = 0 */
 232               	/* stack size = 15 */
 233               	.L__stack_usage = 15
  50:main.c        **** 	Toggle_LED();
 234               		.loc 1 50 0
 235 0090 0E94 0000 		call Toggle_LED
 236               	.LVL3:
 237               	/* epilogue start */
  51:main.c        **** }
 238               		.loc 1 51 0
 239 0094 FF91      		pop r31
 240 0096 EF91      		pop r30
 241 0098 BF91      		pop r27
 242 009a AF91      		pop r26
 243 009c 9F91      		pop r25
 244 009e 8F91      		pop r24
 245 00a0 7F91      		pop r23
 246 00a2 6F91      		pop r22
 247 00a4 5F91      		pop r21
 248 00a6 4F91      		pop r20
 249 00a8 3F91      		pop r19
 250 00aa 2F91      		pop r18
 251 00ac 0F90      		pop r0
 252 00ae 0FBE      		out __SREG__,r0
 253 00b0 0F90      		pop r0
 254 00b2 1F90      		pop r1
 255 00b4 1895      		reti
 256               		.cfi_endproc
 257               	.LFE9:
 259               	.Letext0:
 260               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccsjluyF.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsjluyF.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsjluyF.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsjluyF.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsjluyF.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsjluyF.s:12     .text:0000000000000000 delay_ms
     /tmp/ccsjluyF.s:101    .text:0000000000000062 Toggle_LED
     /tmp/ccsjluyF.s:126    .text.startup:0000000000000000 main
     /tmp/ccsjluyF.s:167    .text:000000000000006e __vector_11

NO UNDEFINED SYMBOLS
