
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000116  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_ms>:
#define LED_1_PORT 	PORTB
#define LED_1_DDR 	DDRB
#define LED_1_PIN_r PINB

void delay_ms(int ms)		// delay error workaround
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <delay_ms+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delay_ms+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	volatile long unsigned int i;
	for(i=0;i<ms;i++)
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	1b 82       	std	Y+3, r1	; 0x03
  92:	1c 82       	std	Y+4, r1	; 0x04
  94:	09 2e       	mov	r0, r25
  96:	00 0c       	add	r0, r0
  98:	aa 0b       	sbc	r26, r26
  9a:	bb 0b       	sbc	r27, r27
  9c:	49 81       	ldd	r20, Y+1	; 0x01
  9e:	5a 81       	ldd	r21, Y+2	; 0x02
  a0:	6b 81       	ldd	r22, Y+3	; 0x03
  a2:	7c 81       	ldd	r23, Y+4	; 0x04
  a4:	48 17       	cp	r20, r24
  a6:	59 07       	cpc	r21, r25
  a8:	6a 07       	cpc	r22, r26
  aa:	7b 07       	cpc	r23, r27
  ac:	98 f4       	brcc	.+38     	; 0xd4 <delay_ms+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	ef ec       	ldi	r30, 0xCF	; 207
  b0:	f7 e0       	ldi	r31, 0x07	; 7
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <delay_ms+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <delay_ms+0x38>
  b8:	00 00       	nop
  ba:	49 81       	ldd	r20, Y+1	; 0x01
  bc:	5a 81       	ldd	r21, Y+2	; 0x02
  be:	6b 81       	ldd	r22, Y+3	; 0x03
  c0:	7c 81       	ldd	r23, Y+4	; 0x04
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
  c6:	6f 4f       	sbci	r22, 0xFF	; 255
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	49 83       	std	Y+1, r20	; 0x01
  cc:	5a 83       	std	Y+2, r21	; 0x02
  ce:	6b 83       	std	Y+3, r22	; 0x03
  d0:	7c 83       	std	Y+4, r23	; 0x04
  d2:	e4 cf       	rjmp	.-56     	; 0x9c <delay_ms+0x1c>
	_delay_ms(1);
}
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <Toggle_LED>:

void Toggle_LED()
{
	if(LED_1_PIN_r & (1<<LED_1_PIN))	LED_1_PORT &= ~(1<<LED_1_PIN);
  e2:	1d 9b       	sbis	0x03, 5	; 3
  e4:	02 c0       	rjmp	.+4      	; 0xea <Toggle_LED+0x8>
  e6:	2d 98       	cbi	0x05, 5	; 5
  e8:	08 95       	ret
	else								LED_1_PORT |= (1<<LED_1_PIN);
  ea:	2d 9a       	sbi	0x05, 5	; 5
  ec:	08 95       	ret

000000ee <__vector_11>:
		// delay_ms(1000);
	}
}

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	Toggle_LED();
 110:	0e 94 71 00 	call	0xe2	; 0xe2 <Toggle_LED>
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:
	else								LED_1_PORT |= (1<<LED_1_PIN);
}

int main(void)
{
	LED_1_DDR |= (1<<LED_1_PIN);					// led pin set as output
 136:	25 9a       	sbi	0x04, 5	; 4

    OCR1A = ((F_CPU / TIM1_PSC) * TIM1_FREQ) - 1;	// (dec 15624) counter size
 138:	83 e8       	ldi	r24, 0x83	; 131
 13a:	9e e1       	ldi	r25, 0x1E	; 30
 13c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 140:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
 144:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 |= (1 << OCIE1A);						// Set interrupt on compare match	
 14e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
 158:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 15c:	85 60       	ori	r24, 0x05	; 5
 15e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    sei();											// enable interrupts
 162:	78 94       	sei
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0x2e>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
