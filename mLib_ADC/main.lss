
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000336  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000918  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001aa  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f0  00000000  00000000  00001ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TIM1_Init>:

// ------------------------- TIMER ----------------------------------------

void TIM1_Init()	// enable interrupts
{
    OCR1A = (((F_CPU/1000) / TIM1_PSC) * TIM1_PER) - 1;	// counter size
  90:	8b ed       	ldi	r24, 0xDB	; 219
  92:	95 e0       	ldi	r25, 0x05	; 5
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
  9c:	e1 e8       	ldi	r30, 0x81	; 129
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
    TIMSK1 |= (1 << OCIE1A);						// Set interrupt on compare match	
  a6:	af e6       	ldi	r26, 0x6F	; 111
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	8c 91       	ld	r24, X
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	8c 93       	st	X, r24
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
  b0:	80 81       	ld	r24, Z
  b2:	85 60       	ori	r24, 0x05	; 5
  b4:	80 83       	st	Z, r24
    sei();	
  b6:	78 94       	sei
  b8:	08 95       	ret

000000ba <USART_Init>:

// ------------------------- UART ----------------------------------------

void USART_Init(unsigned int ubrr)		
{
   UBRR0H = (unsigned char)(ubrr>>8);	// set baud rate to 9600
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
   UBRR0L = (unsigned char)ubrr;		//
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
   UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter 
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
   UCSR0C = (1<<USBS0)|(3<<UCSZ00);		// Set frame format: 8data, 2stop bit
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ce:	08 95       	ret

000000d0 <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSR0A & (1<<UDRE0)) )	// Wait for empty transmit buffer 
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <uart_putchar>
	;
    UDR0 = c;							// Put data into buffer, sends the data 
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  dc:	08 95       	ret

000000de <uart_getchar>:
}

char uart_getchar(void) {
    loop_until_bit_is_set(UCSR0A, RXC0); 	// Wait until data exists
  de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  e2:	87 ff       	sbrs	r24, 7
  e4:	fc cf       	rjmp	.-8      	; 0xde <uart_getchar>
    return UDR0;
  e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ea:	08 95       	ret

000000ec <uart_putstring>:

void uart_putstring(char tab[])
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	int i =0;
	while (( UCSR0A & (1<<UDRE0))  == 0){};
  f0:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  f4:	25 ff       	sbrs	r18, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <uart_putstring+0x4>
  f8:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  fa:	89 91       	ld	r24, Y+
  fc:	88 23       	and	r24, r24
  fe:	19 f0       	breq	.+6      	; 0x106 <uart_putstring+0x1a>
		{ 
            uart_putchar(tab[i]);
 100:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_putchar>
 104:	fa cf       	rjmp	.-12     	; 0xfa <uart_putstring+0xe>
			i++; 
        }
		uart_putchar('\n');
 106:	8a e0       	ldi	r24, 0x0A	; 10
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
        while (tab[i] != 0x00)
		{ 
            uart_putchar(tab[i]);
			i++; 
        }
		uart_putchar('\n');
 10c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <uart_putchar>

00000110 <uart_putint>:
}

void uart_putint(int value)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	60 97       	sbiw	r28, 0x10	; 16
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
	char tab[16];
	itoa(value,tab,10);
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	be 01       	movw	r22, r28
 12a:	6f 5f       	subi	r22, 0xFF	; 255
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	0e 94 0f 01 	call	0x21e	; 0x21e <itoa>
	uart_putstring(tab);
 132:	ce 01       	movw	r24, r28
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	0e 94 76 00 	call	0xec	; 0xec <uart_putstring>
}
 13a:	60 96       	adiw	r28, 0x10	; 16
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <ADC_Init>:

// ------------------------- ADC ----------------------------------------

void ADC_Init()
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	87 60       	ori	r24, 0x07	; 7
 154:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); 	// Set ADC reference to AVCC
 156:	ac e7       	ldi	r26, 0x7C	; 124
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	8c 91       	ld	r24, X
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
 160:	80 81       	ld	r24, Z
 162:	80 68       	ori	r24, 0x80	; 128
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)		
{
	channel &= 0x07;					// AND operation with 7 (will keep channel between 0-7) 
	ADMUX = (ADMUX & 0xF8) | channel;	// clears 3 first bits before OR
 168:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 16c:	98 7f       	andi	r25, 0xF8	; 248
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	89 2b       	or	r24, r25
 172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	ADCSRA |= (1 << ADSC);				// start single convesrion
 176:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while(ADCSRA & (1 << ADSC));		// wait for conversion to complete
 180:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 184:	86 fd       	sbrc	r24, 6
 186:	fc cf       	rjmp	.-8      	; 0x180 <ADC_read+0x18>
	return ADCW;
 188:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 190:	08 95       	ret

00000192 <__vector_11>:
}

// -----------------------------------------------------------------

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	_ADC_read_1 = ADC_read(0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 b4 00 	call	0x168	; 0x168 <ADC_read>
 1ba:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ADC_read_1+0x1>
 1be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ADC_read_1>
	_ADC_read_2 = ADC_read(1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 b4 00 	call	0x168	; 0x168 <ADC_read>
 1c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ADC_read_2+0x1>
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ADC_read_2>
	_ADC_read_3 = ADC_read(2);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 b4 00 	call	0x168	; 0x168 <ADC_read>
 1d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	//uart_putint(_ADC_read_1);
	uart_putint(_ADC_read_2);
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ADC_read_2>
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_ADC_read_2+0x1>
 1e6:	0e 94 88 00 	call	0x110	; 0x110 <uart_putint>
	//uart_putint(_ADC_read_3);
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <main>:

// ------------------------- MAIN ----------------------------------------

int main(void)
{
	USART_Init(MYUBRR);
 20c:	87 e6       	ldi	r24, 0x67	; 103
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 5d 00 	call	0xba	; 0xba <USART_Init>
	TIM1_Init();
 214:	0e 94 48 00 	call	0x90	; 0x90 <TIM1_Init>
	ADC_Init();
 218:	0e 94 a6 00 	call	0x14c	; 0x14c <ADC_Init>
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0x10>

0000021e <itoa>:
 21e:	45 32       	cpi	r20, 0x25	; 37
 220:	51 05       	cpc	r21, r1
 222:	20 f4       	brcc	.+8      	; 0x22c <itoa+0xe>
 224:	42 30       	cpi	r20, 0x02	; 2
 226:	10 f0       	brcs	.+4      	; 0x22c <itoa+0xe>
 228:	0c 94 1a 01 	jmp	0x234	; 0x234 <__itoa_ncheck>
 22c:	fb 01       	movw	r30, r22
 22e:	10 82       	st	Z, r1
 230:	cb 01       	movw	r24, r22
 232:	08 95       	ret

00000234 <__itoa_ncheck>:
 234:	bb 27       	eor	r27, r27
 236:	4a 30       	cpi	r20, 0x0A	; 10
 238:	31 f4       	brne	.+12     	; 0x246 <__itoa_ncheck+0x12>
 23a:	99 23       	and	r25, r25
 23c:	22 f4       	brpl	.+8      	; 0x246 <__itoa_ncheck+0x12>
 23e:	bd e2       	ldi	r27, 0x2D	; 45
 240:	90 95       	com	r25
 242:	81 95       	neg	r24
 244:	9f 4f       	sbci	r25, 0xFF	; 255
 246:	0c 94 26 01 	jmp	0x24c	; 0x24c <__utoa_common>

0000024a <__utoa_ncheck>:
 24a:	bb 27       	eor	r27, r27

0000024c <__utoa_common>:
 24c:	fb 01       	movw	r30, r22
 24e:	55 27       	eor	r21, r21
 250:	aa 27       	eor	r26, r26
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	aa 1f       	adc	r26, r26
 258:	a4 17       	cp	r26, r20
 25a:	10 f0       	brcs	.+4      	; 0x260 <__utoa_common+0x14>
 25c:	a4 1b       	sub	r26, r20
 25e:	83 95       	inc	r24
 260:	50 51       	subi	r21, 0x10	; 16
 262:	b9 f7       	brne	.-18     	; 0x252 <__utoa_common+0x6>
 264:	a0 5d       	subi	r26, 0xD0	; 208
 266:	aa 33       	cpi	r26, 0x3A	; 58
 268:	08 f0       	brcs	.+2      	; 0x26c <__utoa_common+0x20>
 26a:	a9 5d       	subi	r26, 0xD9	; 217
 26c:	a1 93       	st	Z+, r26
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	79 f7       	brne	.-34     	; 0x250 <__utoa_common+0x4>
 272:	b1 11       	cpse	r27, r1
 274:	b1 93       	st	Z+, r27
 276:	11 92       	st	Z+, r1
 278:	cb 01       	movw	r24, r22
 27a:	0c 94 3f 01 	jmp	0x27e	; 0x27e <strrev>

0000027e <strrev>:
 27e:	dc 01       	movw	r26, r24
 280:	fc 01       	movw	r30, r24
 282:	67 2f       	mov	r22, r23
 284:	71 91       	ld	r23, Z+
 286:	77 23       	and	r23, r23
 288:	e1 f7       	brne	.-8      	; 0x282 <strrev+0x4>
 28a:	32 97       	sbiw	r30, 0x02	; 2
 28c:	04 c0       	rjmp	.+8      	; 0x296 <strrev+0x18>
 28e:	7c 91       	ld	r23, X
 290:	6d 93       	st	X+, r22
 292:	70 83       	st	Z, r23
 294:	62 91       	ld	r22, -Z
 296:	ae 17       	cp	r26, r30
 298:	bf 07       	cpc	r27, r31
 29a:	c8 f3       	brcs	.-14     	; 0x28e <strrev+0x10>
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
