
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000021a  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089c  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018a  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012f  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  78:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:

// ------------------------- UART ----------------------------------------

void USART_Init(unsigned int ubrr)		
{
   UBRR0H = (unsigned char)(ubrr>>8);	// set baud rate to 9600
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
   UBRR0L = (unsigned char)ubrr;		//
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
   UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter 
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
   UCSR0C = (1<<USBS0)|(3<<UCSZ00);		// Set frame format: 8data, 2stop bit
  8e:	8e e0       	ldi	r24, 0x0E	; 14
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  94:	08 95       	ret

00000096 <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSR0A & (1<<UDRE0)) )	// Wait for empty transmit buffer 
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <uart_putchar>
	;
    UDR0 = c;							// Put data into buffer, sends the data 
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a2:	08 95       	ret

000000a4 <uart_getchar>:
}

char uart_getchar(void) {
    loop_until_bit_is_set(UCSR0A, RXC0); 	// Wait until data exists
  a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  a8:	87 ff       	sbrs	r24, 7
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <uart_getchar>
    return UDR0;
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b0:	08 95       	ret

000000b2 <uart_putstring>:

void uart_putstring(char tab[])
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	int i =0;
	while (( UCSR0A & (1<<UDRE0))  == 0){};
  b6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  ba:	25 ff       	sbrs	r18, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <uart_putstring+0x4>
  be:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  c0:	89 91       	ld	r24, Y+
  c2:	88 23       	and	r24, r24
  c4:	19 f0       	breq	.+6      	; 0xcc <uart_putstring+0x1a>
		{ 
            uart_putchar(tab[i]);
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <uart_putchar>
  ca:	fa cf       	rjmp	.-12     	; 0xc0 <uart_putstring+0xe>
			i++; 
        }
		uart_putchar('\n');
  cc:	8a e0       	ldi	r24, 0x0A	; 10
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
        while (tab[i] != 0x00)
		{ 
            uart_putchar(tab[i]);
			i++; 
        }
		uart_putchar('\n');
  d2:	0c 94 4b 00 	jmp	0x96	; 0x96 <uart_putchar>

000000d6 <uart_putint>:
}

void uart_putint(int value)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	60 97       	sbiw	r28, 0x10	; 16
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	char tab[16];
	itoa(value,tab,10);
  ea:	4a e0       	ldi	r20, 0x0A	; 10
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	be 01       	movw	r22, r28
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	0e 94 cb 00 	call	0x196	; 0x196 <itoa>
	uart_putstring(tab);
  f8:	ce 01       	movw	r24, r28
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	0e 94 59 00 	call	0xb2	; 0xb2 <uart_putstring>
}
 100:	60 96       	adiw	r28, 0x10	; 16
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <TIM1_Init>:

// ------------------------- END OF UART ----------------------------------------

void TIM1_Init()	// enable interrupts
{
    OCR1A = ((F_CPU / TIM1_PSC) * TIM1_FREQ) - 1;	// (dec 15624) counter size
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	9d e3       	ldi	r25, 0x3D	; 61
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 60       	ori	r24, 0x08	; 8
 126:	80 83       	st	Z, r24
    TIMSK1 |= (1 << OCIE1A);						// Set interrupt on compare match	
 128:	af e6       	ldi	r26, 0x6F	; 111
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	8c 91       	ld	r24, X
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	8c 93       	st	X, r24
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
 132:	80 81       	ld	r24, Z
 134:	85 60       	ori	r24, 0x05	; 5
 136:	80 83       	st	Z, r24
    sei();	
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <ADC_Init>:
}

void ADC_Init()
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	87 60       	ori	r24, 0x07	; 7
 144:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); 	// Set ADC reference to AVCC
 146:	ac e7       	ldi	r26, 0x7C	; 124
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	8c 91       	ld	r24, X
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
 150:	80 81       	ld	r24, Z
 152:	80 68       	ori	r24, 0x80	; 128
 154:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);	// for free running mode
 15c:	80 81       	ld	r24, Z
 15e:	80 62       	ori	r24, 0x20	; 32
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <__vector_11>:
		uart_putint(ADC_read);
	}
}

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1

}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:
	return ADCW;
}*/

int main(void)
{
	USART_Init(MYUBRR);
 178:	87 e6       	ldi	r24, 0x67	; 103
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
	TIM1_Init();
 180:	0e 94 89 00 	call	0x112	; 0x112 <TIM1_Init>
	ADC_Init();
 184:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_Init>
	double ADC_voltage = 0;

	while(1)
	{
		//ADC_voltage = ADC_read*SUPPLY_VOLT/ADC_RES;	// problem z wysylaniem float po UART
		ADC_read = ADCW;
 188:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		//read = ADC_read();	// nie dziala
		uart_putint(ADC_read);
 190:	0e 94 6b 00 	call	0xd6	; 0xd6 <uart_putint>
 194:	f9 cf       	rjmp	.-14     	; 0x188 <main+0x10>

00000196 <itoa>:
 196:	45 32       	cpi	r20, 0x25	; 37
 198:	51 05       	cpc	r21, r1
 19a:	20 f4       	brcc	.+8      	; 0x1a4 <itoa+0xe>
 19c:	42 30       	cpi	r20, 0x02	; 2
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <itoa+0xe>
 1a0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__itoa_ncheck>
 1a4:	fb 01       	movw	r30, r22
 1a6:	10 82       	st	Z, r1
 1a8:	cb 01       	movw	r24, r22
 1aa:	08 95       	ret

000001ac <__itoa_ncheck>:
 1ac:	bb 27       	eor	r27, r27
 1ae:	4a 30       	cpi	r20, 0x0A	; 10
 1b0:	31 f4       	brne	.+12     	; 0x1be <__itoa_ncheck+0x12>
 1b2:	99 23       	and	r25, r25
 1b4:	22 f4       	brpl	.+8      	; 0x1be <__itoa_ncheck+0x12>
 1b6:	bd e2       	ldi	r27, 0x2D	; 45
 1b8:	90 95       	com	r25
 1ba:	81 95       	neg	r24
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__utoa_common>

000001c2 <__utoa_ncheck>:
 1c2:	bb 27       	eor	r27, r27

000001c4 <__utoa_common>:
 1c4:	fb 01       	movw	r30, r22
 1c6:	55 27       	eor	r21, r21
 1c8:	aa 27       	eor	r26, r26
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	a4 17       	cp	r26, r20
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <__utoa_common+0x14>
 1d4:	a4 1b       	sub	r26, r20
 1d6:	83 95       	inc	r24
 1d8:	50 51       	subi	r21, 0x10	; 16
 1da:	b9 f7       	brne	.-18     	; 0x1ca <__utoa_common+0x6>
 1dc:	a0 5d       	subi	r26, 0xD0	; 208
 1de:	aa 33       	cpi	r26, 0x3A	; 58
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <__utoa_common+0x20>
 1e2:	a9 5d       	subi	r26, 0xD9	; 217
 1e4:	a1 93       	st	Z+, r26
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	79 f7       	brne	.-34     	; 0x1c8 <__utoa_common+0x4>
 1ea:	b1 11       	cpse	r27, r1
 1ec:	b1 93       	st	Z+, r27
 1ee:	11 92       	st	Z+, r1
 1f0:	cb 01       	movw	r24, r22
 1f2:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <strrev>

000001f6 <strrev>:
 1f6:	dc 01       	movw	r26, r24
 1f8:	fc 01       	movw	r30, r24
 1fa:	67 2f       	mov	r22, r23
 1fc:	71 91       	ld	r23, Z+
 1fe:	77 23       	and	r23, r23
 200:	e1 f7       	brne	.-8      	; 0x1fa <strrev+0x4>
 202:	32 97       	sbiw	r30, 0x02	; 2
 204:	04 c0       	rjmp	.+8      	; 0x20e <strrev+0x18>
 206:	7c 91       	ld	r23, X
 208:	6d 93       	st	X+, r22
 20a:	70 83       	st	Z, r23
 20c:	62 91       	ld	r22, -Z
 20e:	ae 17       	cp	r26, r30
 210:	bf 07       	cpc	r27, r31
 212:	c8 f3       	brcs	.-14     	; 0x206 <strrev+0x10>
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
