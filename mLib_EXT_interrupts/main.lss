
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000102  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c0  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008e  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000007e  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000122  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Button_1_State>:
#define LED_1_PORT 	PORTB
#define LED_1_DDR 	DDRB

int Button_1_State()
{
	if(!(BUTTON_1_PIN_r & (1<<BUTTON_1_PIN)))	return 1;
  80:	89 b1       	in	r24, 0x09	; 9
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	89 27       	eor	r24, r25
	else 										return 0;
}
  8a:	81 70       	andi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret

00000090 <__vector_1>:
		//else 					LED_1_PORT &= ~(1<<LED_1_PIN);
	}
}

ISR (INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	if(Button_1_State())	LED_1_PORT |=  (1<<LED_1_PIN);
  b2:	0e 94 40 00 	call	0x80	; 0x80 <Button_1_State>
  b6:	89 2b       	or	r24, r25
  b8:	11 f0       	breq	.+4      	; 0xbe <__vector_1+0x2e>
  ba:	2d 9a       	sbi	0x05, 5	; 5
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <__vector_1+0x30>
	else 					LED_1_PORT &= ~(1<<LED_1_PIN);
  be:	2d 98       	cbi	0x05, 5	; 5
}
  c0:	ff 91       	pop	r31
  c2:	ef 91       	pop	r30
  c4:	bf 91       	pop	r27
  c6:	af 91       	pop	r26
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	7f 91       	pop	r23
  ce:	6f 91       	pop	r22
  d0:	5f 91       	pop	r21
  d2:	4f 91       	pop	r20
  d4:	3f 91       	pop	r19
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:
	else 										return 0;
}

int main(void)
{
	DDRD &= ~(1<<DDD2);	// Clear the PD2 pin - PCINT0 is now input
  e2:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);	// turn on the pulllup
  e4:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1<<ISC00);	// set INT0 to trigger on ANY logic change
  e6:	80 91 69 00 	lds	r24, 0x0069
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= (1<<INT0); 	// turns on INT0
  f0:	e8 9a       	sbi	0x1d, 0	; 29
	sei();		// turn on interrupts
  f2:	78 94       	sei

	BUTTON_1_DDR |= (0<<BUTTON_1_PIN);		// button pin set as input
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	8a b9       	out	0x0a, r24	; 10
	BUTTON_1_PORT |= (1<<BUTTON_1_PIN); 	// button input with internal pull-up
  f8:	5a 9a       	sbi	0x0b, 2	; 11

	LED_1_DDR |= (1<<LED_1_PIN);		// led pin set as output
  fa:	25 9a       	sbi	0x04, 5	; 4

	while(1)
	{
		//if(Button_1_State())	LED_1_PORT |=  (1<<LED_1_PIN);
		//else 					LED_1_PORT &= ~(1<<LED_1_PIN);
	}
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x1a>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
