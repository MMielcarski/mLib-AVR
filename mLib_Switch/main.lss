
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000ac  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000aa  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000076  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000071  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010a  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 48 00 	call	0x90	; 0x90 <main>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Button_1_State>:
#define LED_1_PORT PORTB
#define LED_1_DDR DDRB

int Button_1_State()
{
	if(!(BUTTON_1_PIN_r & (1<<BUTTON_1_PIN)))	return 1;
  80:	89 b1       	in	r24, 0x09	; 9
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	89 27       	eor	r24, r25
	else 										return 0;
}
  8a:	81 70       	andi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret

00000090 <main>:

int main(void)
{
	BUTTON_1_DDR |= (0<<BUTTON_1_PIN);		// button pin set as input
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8a b9       	out	0x0a, r24	; 10
	BUTTON_1_PORT |= (1<<BUTTON_1_PIN); 	// button input with internal pull-up
  94:	5a 9a       	sbi	0x0b, 2	; 11

	LED_1_DDR |= (1<<LED_1_PIN);		// led pin set as output
  96:	25 9a       	sbi	0x04, 5	; 4
	//LED_1_PORT | = (1<<LED_1_PIN);

	while(1)
	{
		if(Button_1_State())	LED_1_PORT |=  (1<<LED_1_PIN);
  98:	0e 94 40 00 	call	0x80	; 0x80 <Button_1_State>
  9c:	89 2b       	or	r24, r25
  9e:	11 f0       	breq	.+4      	; 0xa4 <main+0x14>
  a0:	2d 9a       	sbi	0x05, 5	; 5
  a2:	fa cf       	rjmp	.-12     	; 0x98 <main+0x8>
		else 					LED_1_PORT &= ~(1<<LED_1_PIN);
  a4:	2d 98       	cbi	0x05, 5	; 5
  a6:	f8 cf       	rjmp	.-16     	; 0x98 <main+0x8>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
