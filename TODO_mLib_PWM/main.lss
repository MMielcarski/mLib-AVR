
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a8  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000076  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000112  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_11>:
		// delay_ms(1000);
	}
}

ISR(TIMER1_COMPA_vect)	// timer1 overflow interrupt
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	//Toggle_LED();
	OCR1A += 100;	
  92:	e8 e8       	ldi	r30, 0x88	; 136
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	91 81       	ldd	r25, Z+1	; 0x01
  9a:	8c 59       	subi	r24, 0x9C	; 156
  9c:	9f 4f       	sbci	r25, 0xFF	; 255
  9e:	91 83       	std	Z+1, r25	; 0x01
  a0:	80 83       	st	Z, r24

}
  a2:	ff 91       	pop	r31
  a4:	ef 91       	pop	r30
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <main>:
#define TIM1_PSC 1024		// TIMER 1 prescaler value
#define TIM1_FREQ 1			// TIMER 1 desired frequency in seconds

int main(void)
{
	PWM_1_DDR |= (1<<PWM_1_PIN);					// PWM 1 pin set as output
  b4:	21 9a       	sbi	0x04, 1	; 4
	ICR1 = 0xFFFF;									// set TOP to 16bit
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	90 93 87 00 	sts	0x0087, r25
  be:	80 93 86 00 	sts	0x0086, r24
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);		// none-inverting mode
  c2:	80 91 80 00 	lds	r24, 0x0080
  c6:	80 6a       	ori	r24, 0xA0	; 160
  c8:	80 93 80 00 	sts	0x0080, r24
	TCCR1A |= (1<<WGM11);							// set Fast PWM mode using ICR1 as TOP
  cc:	80 91 80 00 	lds	r24, 0x0080
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 93 80 00 	sts	0x0080, r24

    OCR0A = ((F_CPU / TIM1_PSC) * TIM1_FREQ) - 1;	// (dec 15624) counter size
  d6:	83 e8       	ldi	r24, 0x83	; 131
  d8:	87 bd       	out	0x27, r24	; 39
    TCCR1B |= (1 << WGM12);							// Mode 4, CTC on OCR1A
  da:	80 91 81 00 	lds	r24, 0x0081
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 93 81 00 	sts	0x0081, r24
    TIMSK1 |= (1 << OCIE1A);						// Set interrupt on compare match	
  e4:	80 91 6f 00 	lds	r24, 0x006F
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 93 6f 00 	sts	0x006F, r24
    TCCR1B |= (1 << CS12) | (1 << CS10);			// set prescaler to 1024 and start the timer
  ee:	80 91 81 00 	lds	r24, 0x0081
  f2:	85 60       	ori	r24, 0x05	; 5
  f4:	80 93 81 00 	sts	0x0081, r24
    sei();											// enable interrupts
  f8:	78 94       	sei

	OCR1A = 0;
  fa:	10 92 89 00 	sts	0x0089, r1
  fe:	10 92 88 00 	sts	0x0088, r1

	while(1)
	{
		// Toggle_LED();
		// delay_ms(1000);
	}
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0x4e>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
