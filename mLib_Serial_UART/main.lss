
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a6  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087d  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012c  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 77 00 	call	0xee	; 0xee <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
#define LED_1_PORT 	PORTB
#define LED_1_DDR 	DDRB

void USART_Init(unsigned int ubrr)
{
   UBRR0H = (unsigned char)(ubrr>>8);	// set baud rate to 9600
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
   UBRR0L = (unsigned char)ubrr;		//
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
   UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter 
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
   UCSR0C = (1<<USBS0)|(3<<UCSZ00);		// Set frame format: 8data, 2stop bit
  8e:	8e e0       	ldi	r24, 0x0E	; 14
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  94:	08 95       	ret

00000096 <uart_putchar>:
}

void uart_putchar(char c) 
{
	while ( !(UCSR0A & (1<<UDRE0)) )	// Wait for empty transmit buffer 
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <uart_putchar>
	;
    UDR0 = c;							// Put data into buffer, sends the data 
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a2:	08 95       	ret

000000a4 <uart_getchar>:
}

char uart_getchar(void) {
    loop_until_bit_is_set(UCSR0A, RXC0); 	// Wait until data exists
  a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  a8:	87 ff       	sbrs	r24, 7
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <uart_getchar>
    return UDR0;
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b0:	08 95       	ret

000000b2 <Button_1_State>:

int Button_1_State()
{
	if(!(BUTTON_1_PIN_r & (1<<BUTTON_1_PIN)))	return 1;
  b2:	89 b1       	in	r24, 0x09	; 9
  b4:	86 95       	lsr	r24
  b6:	86 95       	lsr	r24
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	89 27       	eor	r24, r25
	else 										return 0;
}
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <uart_putstring>:

void uart_putstring(char tab[])
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	int i =0;
	while (( UCSR0A & (1<<UDRE0))  == 0){};
  c6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  ca:	25 ff       	sbrs	r18, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <uart_putstring+0x4>
  ce:	ec 01       	movw	r28, r24
        while (tab[i] != 0x00)
  d0:	89 91       	ld	r24, Y+
  d2:	88 23       	and	r24, r24
  d4:	19 f0       	breq	.+6      	; 0xdc <uart_putstring+0x1a>
		{ 
            uart_putchar(tab[i]);
  d6:	0e 94 4b 00 	call	0x96	; 0x96 <uart_putchar>
  da:	fa cf       	rjmp	.-12     	; 0xd0 <uart_putstring+0xe>
			i++; 
        }
		uart_putchar('\n');
  dc:	8a e0       	ldi	r24, 0x0A	; 10
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
        while (tab[i] != 0x00)
		{ 
            uart_putchar(tab[i]);
			i++; 
        }
		uart_putchar('\n');
  e2:	0c 94 4b 00 	jmp	0x96	; 0x96 <uart_putchar>

000000e6 <int_to_string>:
}

void int_to_string(int value, char tab[])
{
	itoa(value,tab,10);
  e6:	4a e0       	ldi	r20, 0x0A	; 10
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	0c 94 91 00 	jmp	0x122	; 0x122 <itoa>

000000ee <main>:
}

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	60 97       	sbiw	r28, 0x10	; 16
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
    char input;
	char tab[16];
	int zm = 1666;

	int_to_string(zm,tab);
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	82 e8       	ldi	r24, 0x82	; 130
 112:	96 e0       	ldi	r25, 0x06	; 6
 114:	0e 94 73 00 	call	0xe6	; 0xe6 <int_to_string>

	while(1)
	{
		uart_putstring(tab);
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_putstring>
 120:	fb cf       	rjmp	.-10     	; 0x118 <main+0x2a>

00000122 <itoa>:
 122:	45 32       	cpi	r20, 0x25	; 37
 124:	51 05       	cpc	r21, r1
 126:	20 f4       	brcc	.+8      	; 0x130 <itoa+0xe>
 128:	42 30       	cpi	r20, 0x02	; 2
 12a:	10 f0       	brcs	.+4      	; 0x130 <itoa+0xe>
 12c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__itoa_ncheck>
 130:	fb 01       	movw	r30, r22
 132:	10 82       	st	Z, r1
 134:	cb 01       	movw	r24, r22
 136:	08 95       	ret

00000138 <__itoa_ncheck>:
 138:	bb 27       	eor	r27, r27
 13a:	4a 30       	cpi	r20, 0x0A	; 10
 13c:	31 f4       	brne	.+12     	; 0x14a <__itoa_ncheck+0x12>
 13e:	99 23       	and	r25, r25
 140:	22 f4       	brpl	.+8      	; 0x14a <__itoa_ncheck+0x12>
 142:	bd e2       	ldi	r27, 0x2D	; 45
 144:	90 95       	com	r25
 146:	81 95       	neg	r24
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	0c 94 a8 00 	jmp	0x150	; 0x150 <__utoa_common>

0000014e <__utoa_ncheck>:
 14e:	bb 27       	eor	r27, r27

00000150 <__utoa_common>:
 150:	fb 01       	movw	r30, r22
 152:	55 27       	eor	r21, r21
 154:	aa 27       	eor	r26, r26
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	aa 1f       	adc	r26, r26
 15c:	a4 17       	cp	r26, r20
 15e:	10 f0       	brcs	.+4      	; 0x164 <__utoa_common+0x14>
 160:	a4 1b       	sub	r26, r20
 162:	83 95       	inc	r24
 164:	50 51       	subi	r21, 0x10	; 16
 166:	b9 f7       	brne	.-18     	; 0x156 <__utoa_common+0x6>
 168:	a0 5d       	subi	r26, 0xD0	; 208
 16a:	aa 33       	cpi	r26, 0x3A	; 58
 16c:	08 f0       	brcs	.+2      	; 0x170 <__utoa_common+0x20>
 16e:	a9 5d       	subi	r26, 0xD9	; 217
 170:	a1 93       	st	Z+, r26
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	79 f7       	brne	.-34     	; 0x154 <__utoa_common+0x4>
 176:	b1 11       	cpse	r27, r1
 178:	b1 93       	st	Z+, r27
 17a:	11 92       	st	Z+, r1
 17c:	cb 01       	movw	r24, r22
 17e:	0c 94 c1 00 	jmp	0x182	; 0x182 <strrev>

00000182 <strrev>:
 182:	dc 01       	movw	r26, r24
 184:	fc 01       	movw	r30, r24
 186:	67 2f       	mov	r22, r23
 188:	71 91       	ld	r23, Z+
 18a:	77 23       	and	r23, r23
 18c:	e1 f7       	brne	.-8      	; 0x186 <strrev+0x4>
 18e:	32 97       	sbiw	r30, 0x02	; 2
 190:	04 c0       	rjmp	.+8      	; 0x19a <strrev+0x18>
 192:	7c 91       	ld	r23, X
 194:	6d 93       	st	X+, r22
 196:	70 83       	st	Z, r23
 198:	62 91       	ld	r22, -Z
 19a:	ae 17       	cp	r26, r30
 19c:	bf 07       	cpc	r27, r31
 19e:	c8 f3       	brcs	.-14     	; 0x192 <strrev+0x10>
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
